[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/base/server.js",
    "content": "/**\n * @flow\n */\n/* eslint-disable import/first */\nrequire('source-map-support/register');\nrequire('@babel/register');\nrequire('@babel/polyfill');\n\nimport Pino from 'hapi-pino';\nimport Hapi from '@hapi/hapi';\nimport Inert from '@hapi/inert';\n\n/**\n * Endpoint that can be created, should have a http method, path and controller that resolves when\n * the path is hit\n * @param {string} method     HTTP method the endpoint must be called with to trigger controller\n * @param {string} path       URL path of endpoint\n * @param {Function} controller Handler function that is triggered when endpoint is hit\n */\nexport interface EndpointConfig {\n  method: string;\n  path: string;\n  controller?: any; // eslint-disable-line\n}\n\n/**\n * Hapi Handler for returning messages or setting error codes during requests\n * @type {HapiHandler}\n */\nexport interface HapiHandler {\n  code: Function; // eslint-disable-line\n  response: Function; // eslint-disable-line\n}\n\n/**\n * Request Error Class to help set a response code and message to display to the user\n * @type {RequestError}\n */\nexport class RequestError extends Error {\n  code: number;\n\n  /**\n   * Create a new Request Error\n   * @param {string} msg  message to display when returned\n   * @param {number} code response status code to set in Hapi Response\n   */\n  constructor(msg: string, code: number) {\n    super(msg);\n    this.code = code;\n  }\n}\n\n/**\n * Request Object that is passed to the controller function as the first parameter\n * from https://github.com/hapijs/hapi/blob/master/API.md#request\n * @type {HapiRequest}\n */\nexport interface HapiRequest {\n  server: any; // eslint-disable-line\n  headers: any; // eslint-disable-line\n  // from path\n  params: any; // eslint-disable-line\n  // Body of a POST request\n  payload: any; // eslint-disable-line\n};\n\n\nexport interface ServerParams {\n  name: string;\n  port: number;\n  host: string;\n}\n\n/**\n * Abstraction to manage running the server.\n * Instantiates on application server start up inside `entry.js` file or wherever the intial \"main\" script is\n *\n * @type {Server}\n */\nexport class Server {\n  server: any; // eslint-disable-line\n  name: string;\n\n  /**\n   * Server Constructor\n   */\n  constructor({ name, port, host }: ServerParams) {\n    this.name = name || 'Server';\n    this.server = Hapi.server({\n      port,\n      host\n    });\n  }\n\n  /**\n   * Shutdown the Hapi Server Properly\n   * @param  {Function} callback callback to run after server has shutdown\n   * @return {undefined}            no return\n   */\n  shutdown(callback: Function) { // eslint-disable-line flowtype/no-weak-types\n    // TODO: Set Shutdown Timeout from config\n    this.server.stop({ timeout: 10000 }).then((err: Error) => {\n      if (err) {\n        // TODO: Log Hapi Shutdown Error\n      }\n      callback(err);\n    });\n  }\n\n  /**\n   * Starts the server and registers any plugins\n   * @return {Promise} Resolves once server has started\n   */\n  async run() {\n    await this.server.start();\n    process.stdout.write('\\n\\n' + this.name + ' started on ' + this.server.info.port + '\\n\\n');\n\n    await this.server.register({\n      plugin: Pino,\n      options: {\n        prettyPrint: false,\n        logEvents: ['response']\n      }\n    });\n\n    // Serve Docs with OpenAPI and Swagger UI\n    // visit at http://localhost:3333/docs/swagger/index.html\n    await this.server.register({\n      plugin: Inert\n    });\n  }\n\n\n  /**\n   * Adds an endpoint at the path given handled by the controller\n   * @param {EndpointConfig} endpoint configuration\n   * @return {undefined}\n   */\n  addEndpoint({ method, path, controller }: EndpointConfig) {\n    this.server.route({\n      method,\n      path,\n      handler: controller,\n      options: {\n        cors: true\n      }\n    });\n  }\n\n  /**\n   * Adds the endpoints given to the server\n   * @param {Array<EndpointConfig>} routes Routes to add to the server\n   * @returns {undefined}\n   */\n  addEndpoints(routes: Array<EndpointConfig>) {\n    for (let i: number = 0; i < routes.length; i++) {\n      this.addEndpoint(routes[i]);\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/src/base/server.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "RequestError",
    "memberof": "src/base/server.js",
    "static": true,
    "longname": "src/base/server.js~RequestError",
    "access": "public",
    "export": true,
    "importPath": "HapiServer/src/base/server.js",
    "importStyle": "{RequestError}",
    "description": "Request Error Class to help set a response code and message to display to the user",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "RequestError"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/base/server.js~RequestError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base/server.js~RequestError#constructor",
    "access": "public",
    "description": "Create a new Request Error",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "message to display when returned"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "response status code to set in Hapi Response"
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "code",
    "memberof": "src/base/server.js~RequestError",
    "static": false,
    "longname": "src/base/server.js~RequestError#code",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "class",
    "name": "Server",
    "memberof": "src/base/server.js",
    "static": true,
    "longname": "src/base/server.js~Server",
    "access": "public",
    "export": true,
    "importPath": "HapiServer/src/base/server.js",
    "importStyle": "{Server}",
    "description": "Abstraction to manage running the server.\nInstantiates on application server start up inside `entry.js` file or wherever the intial \"main\" script is",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "Server"
      ],
      "spread": false,
      "description": null
    },
    "interface": false
  },
  {
    "__docId__": 53,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/base/server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base/server.js~Server#constructor",
    "access": "public",
    "description": "Server Constructor",
    "lineNumber": 61
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "name",
    "memberof": "src/base/server.js~Server",
    "static": false,
    "longname": "src/base/server.js~Server#name",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "server",
    "memberof": "src/base/server.js~Server",
    "static": false,
    "longname": "src/base/server.js~Server#server",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "shutdown",
    "memberof": "src/base/server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base/server.js~Server#shutdown",
    "access": "public",
    "description": "Shutdown the Hapi Server Properly",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback to run after server has shutdown"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": "no return"
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "run",
    "memberof": "src/base/server.js~Server",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/base/server.js~Server#run",
    "access": "public",
    "description": "Starts the server and registers any plugins",
    "lineNumber": 90,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves once server has started"
    },
    "params": []
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "addEndpoint",
    "memberof": "src/base/server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base/server.js~Server#addEndpoint",
    "access": "public",
    "description": "Adds an endpoint at the path given handled by the controller",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "EndpointConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoint",
        "description": "configuration"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "addEndpoints",
    "memberof": "src/base/server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base/server.js~Server#addEndpoints",
    "access": "public",
    "description": "Adds the endpoints given to the server",
    "lineNumber": 130,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<EndpointConfig>"
        ],
        "spread": false,
        "optional": false,
        "name": "routes",
        "description": "Routes to add to the server"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/controllers/admin.controller.js",
    "content": "/**\n * @flow\n *\n * NOTE: This file will not be included in the esdoc list because it doesn't export any identifiers\n */\nimport { HapiRequest } from '../base/server.js';\nimport CONFIG from '../helpers/config.helper.js';\nimport healthcheckHelper from '../helpers/healthcheck.helper.js';\n\n/**\n * Basic Controller for returning server information\n * @param  {HapiRequest} request Request Parameters\n * @return {Object}         Server information Object\n */\nfunction infoController(request: HapiRequest): any { // eslint-disable-line\n  return request.server.info;\n}\n\n/**\n * Basic Controller for returning Healthcheck information\n * @param  {HapiRequest} request Request Parameters\n * @return {Object}         Healthcheck response Object\n */\nfunction healthcheckController(request: HapiRequest): any { // eslint-disable-line\n  return healthcheckHelper.getStatus(request.params.level);\n}\n\nexport default [\n  {\n    path: CONFIG.PATHS.healthcheck + '/{level?}',\n    method: 'GET',\n    controller: healthcheckController\n  },\n  {\n    path: CONFIG.PATHS.info,\n    method: 'GET',\n    controller: infoController\n  }\n];\n",
    "static": true,
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/src/controllers/admin.controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "infoController",
    "memberof": "src/controllers/admin.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/controllers/admin.controller.js~infoController",
    "access": "public",
    "export": false,
    "importPath": "HapiServer/src/controllers/admin.controller.js",
    "importStyle": null,
    "description": "Basic Controller for returning server information",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "Request Parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Server information Object"
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "healthcheckController",
    "memberof": "src/controllers/admin.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/controllers/admin.controller.js~healthcheckController",
    "access": "public",
    "export": false,
    "importPath": "HapiServer/src/controllers/admin.controller.js",
    "importStyle": null,
    "description": "Basic Controller for returning Healthcheck information",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "Request Parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Healthcheck response Object"
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "src/controllers/hello.controller.js",
    "content": "/**\n * @flow\n */\n// For some reason this can't use the `app` alias but can do relative pathing here... :/\nimport { HapiRequest } from '../base/server.js';\n\n/**\n * Controllers for Basic \"Hello World\" Functions\n *\n * See https://github.com/hapijs/hapi/blob/master/API.md#request for HapiRequest definition\n */\nexport class HelloWorld {\n  /**\n   * Returns 'Hello World!'\n   * @return {String} Hello World!\n   */\n  static basic(): string {\n    return 'Hello World!';\n  }\n\n  /**\n   * Returns a customized Hello Message\n   * @param  {HapiRequest} request Request Parameters\n   * @return {String}         Customized Hello Message\n   */\n  static name(request: HapiRequest): string {\n\n    const name: string = request.params.name;\n\n    return name + ' says: ' + Math.random() + '!!!!';\n  }\n}\n\nexport default [\n  {\n    path: '/hello',\n    method: 'GET',\n    controller: HelloWorld.basic\n  },\n  {\n    path: '/{name}',\n    method: 'GET',\n    controller: HelloWorld.name\n  }\n];\n",
    "static": true,
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/src/controllers/hello.controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "class",
    "name": "HelloWorld",
    "memberof": "src/controllers/hello.controller.js",
    "static": true,
    "longname": "src/controllers/hello.controller.js~HelloWorld",
    "access": "public",
    "export": true,
    "importPath": "HapiServer/src/controllers/hello.controller.js",
    "importStyle": "{HelloWorld}",
    "description": "Controllers for Basic \"Hello World\" Functions\n\nSee https://github.com/hapijs/hapi/blob/master/API.md#request for HapiRequest definition",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "basic",
    "memberof": "src/controllers/hello.controller.js~HelloWorld",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/controllers/hello.controller.js~HelloWorld.basic",
    "access": "public",
    "description": "Returns 'Hello World!'",
    "lineNumber": 15,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Hello World!"
    },
    "params": []
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "name",
    "memberof": "src/controllers/hello.controller.js~HelloWorld",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/controllers/hello.controller.js~HelloWorld.name",
    "access": "public",
    "description": "Returns a customized Hello Message",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "Request Parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Customized Hello Message"
    }
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "src/controllers/note.controller.js",
    "content": "/**\n * @flow\n */\nimport { HapiRequest, HapiHandler } from '../base/server.js';\nimport NoteDataservice, { Note } from '../dataservices/note.service.js';\n\n/**\n * Container Controller for Note CRUD Functions\n */\nexport class NoteController {\n  /**\n   * Returns a note, specified by Id\n   * @param  {HapiRequest} request RequestObject\n   * @param  {any} handler Hapi Handler object for rejecting/setting errors\n   * @return {Note}         Note corresponding to Id passed in\n   */\n  static async getNoteById({ params }: HapiRequest, handler: HapiHandler): Promise<Note | HapiHandler> {\n    try {\n      return await NoteDataservice.getNote({ id: params.id });\n    } catch (err) {\n      // Get resp(HapiHandler) to return http code if number\n      const resp: HapiHandler = handler.response({\n        message: err.message,\n        code: err.code\n      });\n      if (typeof(err.code) === 'number')  {\n        resp.code(err.code);\n      } else {\n        throw err;\n      }\n      return resp;\n    }\n  }\n\n  /**\n   * Create a new Note\n   * @param  {HapiRequest} request RequestObject\n   * @param  {any} handler Hapi Handler\n   * @return {Note}        [description]\n   */\n  static createNote({ payload }: HapiRequest, handler: HapiHandler): Promise<Note | Array<Note>> {\n    if (payload.name) {\n      return NoteDataservice.createNote({ name: payload.name });\n    } else if (Array.isArray(payload)) {\n      return NoteDataservice.createNotes(payload);\n    } else {\n      return handler.response('Missing Note(s) to create').code(500);\n    }\n  }\n\n  /**\n   * Update a note, specified by id\n   * @param  {HapiRequest} request RequestObject\n   * @return {Note}        [description]\n   */\n  static updateNote({ payload }: HapiRequest) {\n    console.log(payload);\n  }\n\n  /**\n   * Delete a note, specified by id\n   * @param  {HapiRequest} request RequestObject\n   * @return {boolean}        [description]\n   */\n  static deleteNote({ params }: HapiRequest) {\n    console.log(params);\n  }\n}\n\nexport default [\n  {\n    path: '/note/{id}',\n    method: 'GET',\n    controller: NoteController.getNoteById\n  },\n  {\n    path: '/note',\n    method: 'POST',\n    controller: NoteController.createNote\n  },\n  {\n    path: '/note/{id?}',\n    method: 'PUT',\n    controller: NoteController.updateNote\n  },\n  {\n    path: '/note/{id}',\n    method: 'DELETE',\n    controller: NoteController.deleteNote\n  }\n];\n",
    "static": true,
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/src/controllers/note.controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "class",
    "name": "NoteController",
    "memberof": "src/controllers/note.controller.js",
    "static": true,
    "longname": "src/controllers/note.controller.js~NoteController",
    "access": "public",
    "export": true,
    "importPath": "HapiServer/src/controllers/note.controller.js",
    "importStyle": "{NoteController}",
    "description": "Container Controller for Note CRUD Functions",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "getNoteById",
    "memberof": "src/controllers/note.controller.js~NoteController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/controllers/note.controller.js~NoteController.getNoteById",
    "access": "public",
    "description": "Returns a note, specified by Id",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "RequestObject"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "Hapi Handler object for rejecting/setting errors"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Note"
      ],
      "spread": false,
      "description": "Note corresponding to Id passed in"
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "createNote",
    "memberof": "src/controllers/note.controller.js~NoteController",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/controllers/note.controller.js~NoteController.createNote",
    "access": "public",
    "description": "Create a new Note",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "RequestObject"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "Hapi Handler"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Note"
      ],
      "spread": false,
      "description": "[description]"
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "updateNote",
    "memberof": "src/controllers/note.controller.js~NoteController",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/controllers/note.controller.js~NoteController.updateNote",
    "access": "public",
    "description": "Update a note, specified by id",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "RequestObject"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Note"
      ],
      "spread": false,
      "description": "[description]"
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "deleteNote",
    "memberof": "src/controllers/note.controller.js~NoteController",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/controllers/note.controller.js~NoteController.deleteNote",
    "access": "public",
    "description": "Delete a note, specified by id",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "RequestObject"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "[description]"
    }
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "src/dataservices/note.service.js",
    "content": "/**\n * @flow\n *\n * MariaDB Service Example\n */\nimport mariadbHelper, { MariaDBInsertResponse } from '../helpers/mariadb.helper.js'; // eslint-disable-line\nimport { RequestError } from '../base/server.js';\n\n/**\n * Note object with name and id\n * @type {Note}\n */\nexport interface Note {\n  id: number;\n  name: string;\n};\n\n/**\n * Note Dataservice for interacting with the storage system for saving notes\n */\nexport default class NoteDataservice {\n  /**\n   * Returns a note, specified by the caller by id\n   * @param  {number|string} id  `id` number of the Note to retrieve\n   * @return {Note}       Note object\n   */\n  static async getNote({ id }: { id: number }): Promise<Note> {\n    if (typeof(id) === 'string' && Number.isNaN(Number.parseInt((id: string)))) {\n      throw new RequestError('Note Id must be an integer', 400);\n    }\n    try {\n      const row: Note = await mariadbHelper.fetchOne(`SELECT * FROM test.notes WHERE id=${id}`);\n\n      if (row === undefined) {\n        throw new RequestError('Unrecognized Note Id', 404);\n      }\n\n      return row;\n    } catch (err) {\n      console.log(err);\n      throw err;\n    }\n  }\n\n  /**\n   * Creates a new note with a name\n   * TODO: add (optional) content param and attribute\n   * @param  {String}  name name of note\n   * @return {Note}      Note Object\n   */\n  static async createNote({ name }: { name: string }): Promise<Note> {\n    try {\n      const response: MariaDBInsertResponse = await mariadbHelper.insert('test.notes', {\n        name\n      });\n\n      // TODO: Figure out how to debug with atom\n      console.log(response);\n\n      return await NoteDataservice.getNote({ id: response.insertId });\n    } catch (err) {\n      console.log(err);\n      throw err;\n    }\n  }\n\n  /**\n   * Create multiple notes\n   * @param  {Array}  notes Array of note objects with name parameter\n   * @return {Promise}       [description]\n   */\n  static async createNotes(notes: Array<{name: string}>): Promise<Array<Note> | Note> {\n    try {\n      const insert: MariaDBInsertResponse = await mariadbHelper.insertMultiple('test.notes', notes);\n\n      const endId: number = insert.insertId + insert.affectedRows;\n      const query: string = `SELECT * from test.notes WHERE id >= ${insert.insertId} AND id < ${endId}`;\n\n      return await mariadbHelper.fetch(query);\n    } catch (err) {\n      console.log(err);\n      throw err;\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/src/dataservices/note.service.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "class",
    "name": "NoteDataservice",
    "memberof": "src/dataservices/note.service.js",
    "static": true,
    "longname": "src/dataservices/note.service.js~NoteDataservice",
    "access": "public",
    "export": true,
    "importPath": "HapiServer/src/dataservices/note.service.js",
    "importStyle": "NoteDataservice",
    "description": "Note Dataservice for interacting with the storage system for saving notes",
    "lineNumber": 18,
    "interface": false
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "getNote",
    "memberof": "src/dataservices/note.service.js~NoteDataservice",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/dataservices/note.service.js~NoteDataservice.getNote",
    "access": "public",
    "description": "Returns a note, specified by the caller by id",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "`id` number of the Note to retrieve"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Note"
      ],
      "spread": false,
      "description": "Note object"
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "createNote",
    "memberof": "src/dataservices/note.service.js~NoteDataservice",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/dataservices/note.service.js~NoteDataservice.createNote",
    "access": "public",
    "description": "Creates a new note with a name\nTODO: add (optional) content param and attribute",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of note"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Note"
      ],
      "spread": false,
      "description": "Note Object"
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "createNotes",
    "memberof": "src/dataservices/note.service.js~NoteDataservice",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/dataservices/note.service.js~NoteDataservice.createNotes",
    "access": "public",
    "description": "Create multiple notes",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "notes",
        "description": "Array of note objects with name parameter"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "[description]"
    }
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/entry.js",
    "content": "/**\n * @flow\n *\n * Entry point that loads all routes for the server\n */\nimport path from 'path';\nimport { Server, EndpointConfig } from './base/server.js';\nimport mariadb from './helpers/mariadb.helper.js';\nimport CONFIG from './helpers/config.helper.js';\n\n// TODO: auto detect routes\n// https://stackoverflow.com/questions/6059246/how-to-include-route-handlers-in-multiple-files-in-express\nimport adminRoutes from './controllers/admin.controller.js';\nimport helloRoutes from './controllers/hello.controller.js';\nimport noteRoutes from './controllers/note.controller.js';\n\n/**\n * Build the routes from files and add docs if CONFIG set\n * @type {Array<EndpointConfig>}\n */\nlet routes: Array<EndpointConfig> = helloRoutes.concat(noteRoutes);\nroutes.forEach((route: EndpointConfig) => {\n  route.path = CONFIG.PATHS.api + route.path;\n});\nroutes = routes.concat(adminRoutes);\n\nif (CONFIG.SERVER.docs) {\n  routes.push({\n    method: 'GET',\n    path: CONFIG.PATHS.api,\n    controller: {\n      file: path.resolve(__dirname, '../openapi.yaml')\n    }\n  });\n\n  routes.push({\n    method: 'GET',\n    path: '/docs/{param*}',\n    controller: {\n      directory: {\n        path: path.resolve(__dirname, '../docs'),\n        index: true,\n        redirectToSlash: true\n      }\n    }\n  });\n}\n/**\n * Entry point to run the server\n * @return {undefined} no return\n */\nexport default async function main() {\n  // TODO: Check if mysql can be connected/db exists (use name in config file)\n  // Only serve healthcheck if error (redirect all other pages to healtcheck?)\n\n  console.log(process.env.NODE_ENV);\n  const server: Server = new Server({\n    name: CONFIG.SERVER.name,\n    host: CONFIG.SERVER.host,\n    port: CONFIG.SERVER.port\n  });\n\n  await server.run();\n\n  server.addEndpoints(routes);\n\n  process.on('SIGTERM', () => {\n    attemptGracefulShutdown(server);\n  });\n  process.on('SIGUSR2', () => { // For nodemon?\n    attemptGracefulShutdown(server);\n  });\n}\nmain();\n\n/**\n * Attempt to shutdown the server and database connections\n * @param  {Server} server Server Object to be shutdown\n * @return {undefined}        undefined\n */\nfunction attemptGracefulShutdown(server: Server) {\n  console.log('shutdown signal');\n  server.shutdown((hapiErr: Error) => {\n    console.log('hapi server shutdown');\n    mariadb.shutdown((dbErr: Error) => {\n      console.log('mariadb shutdown');\n      process.exit(hapiErr || dbErr ? 1 : 0);\n    });\n  });\n}\n\n// What is this about again?\nprocess.on('unhandledRejection', (err) => { // eslint-disable-line\n  process.stdout.write(JSON.stringify(err));\n  process.exit(1);\n});\n",
    "static": true,
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/src/entry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "routes",
    "memberof": "src/entry.js",
    "static": true,
    "longname": "src/entry.js~routes",
    "access": "public",
    "export": false,
    "importPath": "HapiServer/src/entry.js",
    "importStyle": null,
    "description": "Build the routes from files and add docs if CONFIG set",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Array<EndpointConfig>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "main",
    "memberof": "src/entry.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/entry.js~main",
    "access": "public",
    "export": true,
    "importPath": "HapiServer/src/entry.js",
    "importStyle": "main",
    "description": "Entry point to run the server",
    "lineNumber": 52,
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": "no return"
    },
    "params": []
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "attemptGracefulShutdown",
    "memberof": "src/entry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/entry.js~attemptGracefulShutdown",
    "access": "public",
    "export": false,
    "importPath": "HapiServer/src/entry.js",
    "importStyle": null,
    "description": "Attempt to shutdown the server and database connections",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "Server"
        ],
        "spread": false,
        "optional": false,
        "name": "server",
        "description": "Server Object to be shutdown"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": "undefined"
    },
    "ignore": true
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/helpers/config.helper.js",
    "content": "/**\n * @flow\n */\nimport path from 'path';\nimport YAML from 'yamljs';\nimport fs from 'fs'; // eslint-disable-line\n\n/**\n * YAML file content\n * @type {string}\n */\nconst yamlContent: string = fs.readFileSync(path.resolve(__dirname, '../../conf/config.yaml'), 'utf-8');\n\n// TODO: env.properties file with replacements/defaults in config.yaml?\n\n\n\n/**\n * CONFIG object with SERVER and DB properties\n * @type {Config}\n */\nconst CONFIG: Config = YAML.parse(yamlContent);\nexport default CONFIG;\n\n/**\n * Config Helper Expected Properties\n * @type {Config}\n */\nexport interface Config {\n  SERVER: {\n    protocol: string;\n    host: string;\n    name: string;\n    port: number;\n    tmpDir: string; // For generating files\n    docs: boolean; // should display docs?\n  };\n  DB: {\n    MARIADB: DatabaseConfig\n  };\n  PATHS: {\n    api: string;\n    healthcheck: string;\n    info: string;\n  };\n  EXTERNAL_SERVICES: {\n    // TODO: Update this\n    EXAMPLE: ExternalServiceConfig\n  };\n}\n\nexport interface DatabaseConfig {\n  serviceName?: string;\n  name: string;\n  host: string;\n  user: string;\n  password: string;\n}\n\nexport interface ExternalServiceConfig {\n  serviceName?: string;\n  protocol: string;\n  host: string;\n  port: number;\n  path: string;\n  healthcheck?: {\n    port?: number;\n    path: string;\n  };\n  cacheEnabled: boolean;\n  cacheExpiration: number;\n}\n",
    "static": true,
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/src/helpers/config.helper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "yamlContent",
    "memberof": "src/helpers/config.helper.js",
    "static": true,
    "longname": "src/helpers/config.helper.js~yamlContent",
    "access": "public",
    "export": false,
    "importPath": "HapiServer/src/helpers/config.helper.js",
    "importStyle": null,
    "description": "YAML file content",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "CONFIG",
    "memberof": "src/helpers/config.helper.js",
    "static": true,
    "longname": "src/helpers/config.helper.js~CONFIG",
    "access": "public",
    "export": true,
    "importPath": "HapiServer/src/helpers/config.helper.js",
    "importStyle": "CONFIG",
    "description": "CONFIG object with SERVER and DB properties",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Config"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/helpers/healthcheck.helper.js",
    "content": "/**\n * @flow\n */\nimport _ from 'lodash';\nimport http from 'http';\nimport CONFIG, { DatabaseConfig, ExternalServiceConfig } from './config.helper.js';\nimport { MariaDBHelper } from './mariadb.helper.js';\nimport pack from '../../package.json';\nimport file from 'fs';\nimport path from 'path';\n\n/**\n * Healthcheck Response Object containing the healthcheck name, status and if it errored or not\n * @type {HealthcheckResponse}\n */\ninterface HealthcheckResponse {\n  name: string | typeof undefined;\n  status: any;\n  error?: boolean;\n};\n\n/**\n * Retrieves the status of a database, based on the config given\n * @param  {DatabaseConfig} config config of database to check\n * @return {HealthcheckResponse}     Response from Database Healtcheck\n */\nasync function _getDatabaseStatus(config: DatabaseConfig): Promise<HealthcheckResponse> {\n  const response: HealthcheckResponse = {\n    name: config.serviceName,\n    status: undefined\n  };\n  try {\n    const helper: MariaDBHelper = new MariaDBHelper({\n      config: _.merge(config, {\n        connectionLimit: 1\n      })\n    });\n    const status: string | boolean = await helper.getStatus();\n    response.status = JSON.stringify(status);\n    helper.shutdown();\n  } catch (error) {\n    response.error = true;\n    response.status = error;\n  }\n\n  return response;\n}\n\n/**\n * Retrieves the status of an external service via http request to an endpoint, based on config given\n * @param       {ExternalServiceConfig} config config of external service\n * @return      {HealthcheckResponse}     Response from Database Healtcheck\n */\nasync function _getExternalServiceStatus(config: ExternalServiceConfig): Promise<HealthcheckResponse> {\n  const endpoint: string = config.protocol + '://' + config.host + ':' +\n    _.get(config.healthcheck, 'port', config.port) + _.get(config.healthcheck, 'path', config.path);\n\n  const promise = new Promise((resolve, reject) => { // eslint-disable-line\n    const req = http.get(endpoint, (response) => { // eslint-disable-line\n      response.on('data', (data: string) => {\n        resolve(data);\n      });\n    });\n    // TODO: Set Timeout length from Config (per service or have default?)\n    req.setTimeout(5000, () => {\n      req.destroy();\n      reject('Error: Timeout at ' + endpoint);\n    });\n    req.on('error', (error: Error) => {\n      reject(error);\n    });\n  });\n\n  const response: HealthcheckResponse = {\n    name: config.serviceName,\n    status: undefined\n  };\n  try {\n    response.status += await promise;\n  } catch (error) {\n    response.error = true;\n    response.status = error;\n  }\n  return response;\n}\n\n/**\n * Returns the current branch of the build (TODO: development vs production?)\n * @return {string} information about the current branch and build\n */\nfunction getBranch(): string {\n  const content: string = file.readFileSync(path.join(__dirname, '../../.git/HEAD'), { encoding: 'UTF-8' });\n\n  const split: string[] = content.split('/');\n  return split[split.length - 1];\n}\n\n/**\n * Class to wrap the methods that are used for server healthcheck\n */\nclass HealthcheckHelper {\n  // Tried these with ES6 Map type but it made it much harder to do easy JSON manipulations\n  serviceMap: { [name: string]: ExternalServiceConfig };\n  dbMap: { [name: string]: DatabaseConfig };\n\n  /**\n   * Creates the Healthcheck helper by loading the configuration file and parsing the database and external\n   * service configurations\n   */\n  constructor() {\n    this.serviceMap = {};\n    this.dbMap = {};\n    _.each(CONFIG.EXTERNAL_SERVICES, (service: ExternalServiceConfig, name: string) => {\n      if (service.serviceName === undefined) {\n        service.serviceName = name;\n      }\n      this.serviceMap[name] = service;\n    });\n\n    _.each(CONFIG.DB, (service: DatabaseConfig, name: string) => {\n      if (service.serviceName === undefined) {\n        service.serviceName = name;\n      }\n      this.dbMap[name] = service;\n    });\n  }\n\n  /**\n   * Returns whether the service passed is running\n   * @param  {string}  serviceName name of the service/database to check is running\n   * @return {Boolean}             whether or not the service returns it is healthy\n   */\n  async isRunning(serviceName: string): Promise<HealthcheckResponse | false> {\n    const conf: DatabaseConfig | ExternalServiceConfig = this.serviceMap[serviceName];\n    // TODO: don't check if it exists, check if it is actually running\n    if (conf !== undefined) {\n      if (conf instanceof DatabaseConfig) {\n        return await _getDatabaseStatus(conf);\n      } else {\n        return await _getExternalServiceStatus(conf);\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns the status\n   * @param {String} level of healthcheck status to view\n   *  L1: this server + version\n   *  L2: databases and other essential services we manage for the endpoints to work\n   *  L3: external services we don't have control over and hopefully we catch errors for to explain to user\n   * @returns {any} status of services in that level (or full status of server if no level provided)\n   */\n  async getStatus(level?: 'L1' | 'L2' | 'L3'): any {\n    /* eslint-disable id-length */\n    const status = {\n      L1: [\n        {\n          name: 'SERVER',\n          status: 'alive',\n        },\n        {\n          name: 'VERSION',\n          status: pack.version\n        },\n        {\n          name: 'BRANCH',\n          status: getBranch()\n        }\n      ],\n      L2: await Promise.all(_.map(this.dbMap, _getDatabaseStatus)),\n      L3: await Promise.all(_.map(this.serviceMap, _getExternalServiceStatus))\n    };\n    /* eslint-enable id-length */\n\n    return level === undefined ? status : status[level];\n  }\n}\n\n/**\n * Exported Helperto interact with Healcheck Operations\n * @type {Healthcheck}\n */\nconst healthcheckHelper: HealthcheckHelper = new HealthcheckHelper();\nexport default healthcheckHelper;\n",
    "static": true,
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/src/helpers/healthcheck.helper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "_getDatabaseStatus",
    "memberof": "src/helpers/healthcheck.helper.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/helpers/healthcheck.helper.js~_getDatabaseStatus",
    "access": "private",
    "export": false,
    "importPath": "HapiServer/src/helpers/healthcheck.helper.js",
    "importStyle": null,
    "description": "Retrieves the status of a database, based on the config given",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "DatabaseConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "config of database to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HealthcheckResponse"
      ],
      "spread": false,
      "description": "Response from Database Healtcheck"
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "_getExternalServiceStatus",
    "memberof": "src/helpers/healthcheck.helper.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/helpers/healthcheck.helper.js~_getExternalServiceStatus",
    "access": "private",
    "export": false,
    "importPath": "HapiServer/src/helpers/healthcheck.helper.js",
    "importStyle": null,
    "description": "Retrieves the status of an external service via http request to an endpoint, based on config given",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "ExternalServiceConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "config of external service"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HealthcheckResponse"
      ],
      "spread": false,
      "description": "Response from Database Healtcheck"
    },
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "getBranch",
    "memberof": "src/helpers/healthcheck.helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/healthcheck.helper.js~getBranch",
    "access": "public",
    "export": false,
    "importPath": "HapiServer/src/helpers/healthcheck.helper.js",
    "importStyle": null,
    "description": "Returns the current branch of the build (TODO: development vs production?)",
    "lineNumber": 85,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "information about the current branch and build"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "class",
    "name": "HealthcheckHelper",
    "memberof": "src/helpers/healthcheck.helper.js",
    "static": true,
    "longname": "src/helpers/healthcheck.helper.js~HealthcheckHelper",
    "access": "public",
    "export": true,
    "importPath": "HapiServer/src/helpers/healthcheck.helper.js",
    "importStyle": null,
    "description": "Class to wrap the methods that are used for server healthcheck",
    "lineNumber": 95,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 90,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/helpers/healthcheck.helper.js~HealthcheckHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/healthcheck.helper.js~HealthcheckHelper#constructor",
    "access": "public",
    "description": "Creates the Healthcheck helper by loading the configuration file and parsing the database and external\nservice configurations",
    "lineNumber": 103
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "serviceMap",
    "memberof": "src/helpers/healthcheck.helper.js~HealthcheckHelper",
    "static": false,
    "longname": "src/helpers/healthcheck.helper.js~HealthcheckHelper#serviceMap",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "dbMap",
    "memberof": "src/helpers/healthcheck.helper.js~HealthcheckHelper",
    "static": false,
    "longname": "src/helpers/healthcheck.helper.js~HealthcheckHelper#dbMap",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "isRunning",
    "memberof": "src/helpers/healthcheck.helper.js~HealthcheckHelper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/helpers/healthcheck.helper.js~HealthcheckHelper#isRunning",
    "access": "public",
    "description": "Returns whether the service passed is running",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "serviceName",
        "description": "name of the service/database to check is running"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "whether or not the service returns it is healthy"
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "getStatus",
    "memberof": "src/helpers/healthcheck.helper.js~HealthcheckHelper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/helpers/healthcheck.helper.js~HealthcheckHelper#getStatus",
    "access": "public",
    "description": "Returns the status",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any} status of services in that level (or full status of server if no level provided)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "level",
        "description": "of healthcheck status to view\n L1: this server + version\n L2: databases and other essential services we manage for the endpoints to work\n L3: external services we don't have control over and hopefully we catch errors for to explain to user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "status of services in that level (or full status of server if no level provided)"
    }
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "healthcheckHelper",
    "memberof": "src/helpers/healthcheck.helper.js",
    "static": true,
    "longname": "src/helpers/healthcheck.helper.js~healthcheckHelper",
    "access": "public",
    "export": true,
    "importPath": "HapiServer/src/helpers/healthcheck.helper.js",
    "importStyle": "healthcheckHelper",
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "type": {
      "types": [
        "src/helpers/healthcheck.helper.js~HealthcheckHelper"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "src/helpers/mariadb.helper.js",
    "content": "/**\n * @flow\n */\nimport mariadb from 'mariadb';\nimport CONFIG from './config.helper.js';\n\n\n// Disable weak type rule to allow for generalized database objects\n/* eslint-disable flowtype/no-weak-types, flowtype/require-variable-type */\n\n/**\n * Configuration for MariaDBHelper Database connection\n * @type {MariaDBConfig}\n */\nexport interface MariaDBConfig {\n  host: string;\n  user: string;\n  password: string;\n  connectionLimit: number;\n};\n\n/**\n * Response from MariaDB Insert statement (From MariaDB)\n * @type {MariaDBInsertResponse}\n */\nexport interface MariaDBInsertResponse {\n  affectedRows: number;\n  insertId: number;\n  warningStatus: number;\n}\n\n/**\n * MariaDB Helper for easy access to a configured MySQL Connection, with consistent methods for simple\n * interactions and larger transactions.\n *\n * This class can also be instantiated pointing elsewhere with a different MariaDBConfig passed to the\n * constructor\n * @type {MariaDBHelper}\n */\nexport class MariaDBHelper {\n  /**\n   * MariaDB Pool API\n   * @type {PoolApi} https://mariadb.com/kb/en/library/connector-nodejs-promise-api/#pool-api\n   */\n  dbPool: any;\n  transactionConnection: any;\n\n  /**\n   * Creates a new Helper (on this file export starts the Database Pool)\n   * @param {MariaDBConfig} config                Configuration to Connect to MySQL Database\n   * @param {MariaDB.Connection} transactionConnection MariaDB Connection to use for larger transactions\n   */\n  constructor({ config, transactionConnection }: { config?: MariaDBConfig, transactionConnection?: any }) {\n    // NOTE: Not sure if this is better, or if we should just make sure to always call `shutdown` to close db\n    // If testing, skip any startup\n    if (process.argv.includes('--env.unit_test')) {\n      return;\n    }\n\n    if (config) {\n      // Instantiating a connection to a different server\n      this.dbPool = mariadb.createPool(config);\n    } else if (transactionConnection) {\n      // For Larger Transaction\n      // TODO: Finish up transactionConnection Helper\n    } else {\n      // TODO: Log on failure to create MariaDB Helper\n      throw new Error('MariaDBHelper created without DB Config or connection to use');\n    }\n  }\n\n  /**\n   * Shuts down the mariadb connections\n   * @param  {Function} callback callback function to call after shutting down db connections\n   * @return {undefined}            no return\n   */\n  shutdown(callback: Function) {\n    if (this.dbPool) {\n      this.dbPool.end((err: Error) => {\n        if (err) {\n          // TODO: Do Something on MariaDB Shutdown error\n        }\n        callback(err);\n      });\n    }\n  }\n\n  /**\n   * Return the status of the database server (should be called on an instance with a pool, not connection)\n   * @return {String | boolean}     Either the current time, returned from database, or false if unable\n   * to connect\n   */\n  async getStatus(): Promise<string | boolean> {\n    if (this.dbPool) {\n      return await this.dbPool.query('SELECT NOW();');\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Execute a simple query on the entire database\n   * @param  {string}  query Query string to be passed to DB for response\n   *  see https://mariadb.com/kb/en/library/data-manipulation/ for reference\n   * @param  {Array<any>}      values Array of values to inject into the query string, matching the number of\n   *  placeholders given\n   * @return {Promise}        Returns the response from the query\n   */\n  query(query: string, values?: Array<any>): Promise<any> {\n    if (this.transactionConnection) {\n      // TODO: use transaction connection if it exists (this is what makes this so versatile)\n      return this.transactionConnection.query(query, values);\n    } else {\n      return this.dbPool.query(query, values);\n    }\n  }\n\n  /**\n   * Fetch all rows given a query string and values that can qualify the query\n   * @param  {string}  query  Query string to pass to mariadb\n   * @return {Promise}        Return array of values\n   */\n  async fetch(query: string): Promise<Array<any>> {\n    // TODO: Log if query doesn't contain `SELECT`\n\n    const response = await this.query(query);\n\n    if (!response || response.length === 0) {\n      return [];\n    }\n    return response;\n  }\n\n  /**\n   * Fetch the (first) row that matches a string\n   * @param  {string}  query  Query string to pass to mariadb\n   * @return {Promise}        Returns a single value\n   */\n  async fetchOne(query: string): Promise<any> {\n    const response = await this.fetch(query);\n\n    if (!response || response.length === 0) {\n      return undefined;\n    }\n\n    return response[0];\n  }\n\n  /**\n   * Insert an Object into a specific table\n   * @param  {String}  table  Name of table to insert object into\n   * @param  {Object}  object Mapping from column names to values to insert into DB Table\n   * @return {Promise<MariaDBInsertResponse>}        Response from MariaDB\n   */\n  async insert(table: string, object: Object): Promise<MariaDBInsertResponse> {\n    // e.g. {'abc': 1, 'def', 2 }\n    const keyString: string = Object.keys(object).join(', '); // 'abc, def'\n\n    const values: Array<any> = Object.values(object); // [1, 2]\n    const inserts: string = '?,'.repeat(values.length).slice(0, (values.length * 2) - 1); // '?, ?'\n\n    const response: MariaDBInsertResponse = await this.query(\n      `INSERT INTO ${table} (${keyString}) value (${inserts})`,\n      values\n    );\n\n    return response;\n  }\n\n  /**\n   * Insert multiple objects into the table\n   * @param  {string}  table   to insert into\n   * @param  {Array<Object>}  objects Array of objects to insert\n   * @return {Promise}        Response from MariaDB\n   */\n  async insertMultiple(table: string, objects: Array<Object>): Promise<any> {\n    // e.g. {'abc': 1, 'def', 2 }\n    const firstObject = objects[0];\n    const keyString: string = Object.keys(firstObject).join(', '); // 'abc, def'\n\n    let inserts = '';\n    const allValues = [];\n    for (const object of objects) {\n      const values: Array<any> = Object.values(object); // [1, 2]\n      inserts = '?,'.repeat(values.length).slice(0, (values.length * 2) - 1); // '?, ?'\n      allValues.push(values);\n    }\n\n    // TODO: Handle insert if in transaction\n    if (this.transactionConnection) {\n      // just use transactionConnection instead?\n    } else {\n      // Best way to insert multiple objects in one statement?\n      return await this.dbPool.batch(`INSERT INTO ${table} (${keyString}) VALUES (${inserts})`, allValues);\n    }\n  }\n\n  // async update(table: string, object: any, where: any): any {\n  //  // TODO: Write proper update statement\n  // }\n\n  // /**\n  //  * Create a new connection and Helper to run a single transaction with multiple queries/db statements\n  //  * @param  {Function} transactionCallback Uses the helper passed back to run all of the different queries\n  //  * @return {Promise}                     Indicates that the transaction has completed or errored\n  //  */\n  // transaction(transactionCallback: Function): Promise<any> {\n  //   console.log(transactionCallback);\n  //   if (this.dbPool) { // TODO: Create new Helper with a connection from pool }\n  //\n  //   return new Promise((resolve: Function, reject: Function) => {\n  //     console.log(this);\n  //     this._beginTransaction();\n  //\n  //     // TODO: call transactionCallback(with new helper)\n  //\n  //     // TODO: close connection properly\n  //\n  //     if (failure)\n  //       this._rollbackTransaction();\n  //       console.log(reject);\n  //\n  //     else\n  //       this._commitTransaction();\n  //       console.log(resolve);\n  //\n  //   });\n  // }\n\n  // async _beginTransaction() {\n  //\n  // }\n  //\n  // async _commitTransaction() {\n  //\n  // }\n  //\n  // async _rollbackTransaction() {\n  //\n  // }\n\n  // async healthCheck() {\n  //\n  // }\n}\n\n\nconst mariadbHelper = new MariaDBHelper({ config: {\n  database: undefined,\n  host: CONFIG.DB.MARIADB.host,\n  user: CONFIG.DB.MARIADB.user,\n  password: CONFIG.DB.MARIADB.password,\n  connectionLimit: 5\n} });\n\n/**\n * Exported MariaDB Helper that uses DB configuration in config.yaml\n * @type {MariaDBHelper}\n */\nexport default mariadbHelper;\n",
    "static": true,
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/src/helpers/mariadb.helper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "class",
    "name": "MariaDBHelper",
    "memberof": "src/helpers/mariadb.helper.js",
    "static": true,
    "longname": "src/helpers/mariadb.helper.js~MariaDBHelper",
    "access": "public",
    "export": true,
    "importPath": "HapiServer/src/helpers/mariadb.helper.js",
    "importStyle": "{MariaDBHelper}",
    "description": "MariaDB Helper for easy access to a configured MySQL Connection, with consistent methods for simple\ninteractions and larger transactions.\n\nThis class can also be instantiated pointing elsewhere with a different MariaDBConfig passed to the\nconstructor",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "MariaDBHelper"
      ],
      "spread": false,
      "description": null
    },
    "interface": false
  },
  {
    "__docId__": 98,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/helpers/mariadb.helper.js~MariaDBHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/mariadb.helper.js~MariaDBHelper#constructor",
    "access": "public",
    "description": "MariaDB Pool API",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "PoolApi"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "dbPool",
    "memberof": "src/helpers/mariadb.helper.js~MariaDBHelper",
    "static": false,
    "longname": "src/helpers/mariadb.helper.js~MariaDBHelper#dbPool",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "shutdown",
    "memberof": "src/helpers/mariadb.helper.js~MariaDBHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/mariadb.helper.js~MariaDBHelper#shutdown",
    "access": "public",
    "description": "Shuts down the mariadb connections",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback function to call after shutting down db connections"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": "no return"
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "getStatus",
    "memberof": "src/helpers/mariadb.helper.js~MariaDBHelper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/helpers/mariadb.helper.js~MariaDBHelper#getStatus",
    "access": "public",
    "description": "Return the status of the database server (should be called on an instance with a pool, not connection)",
    "lineNumber": 79,
    "return": {
      "nullable": null,
      "types": [
        "String ",
        " boolean"
      ],
      "spread": false,
      "description": "Either the current time, returned from database, or false if unable\nto connect"
    },
    "params": []
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "query",
    "memberof": "src/helpers/mariadb.helper.js~MariaDBHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/mariadb.helper.js~MariaDBHelper#query",
    "access": "public",
    "description": "Execute a simple query on the entire database",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "query",
        "description": "Query string to be passed to DB for response\n see https://mariadb.com/kb/en/library/data-manipulation/ for reference"
      },
      {
        "nullable": null,
        "types": [
          "Array<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "Array of values to inject into the query string, matching the number of\n placeholders given"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns the response from the query"
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "fetch",
    "memberof": "src/helpers/mariadb.helper.js~MariaDBHelper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/helpers/mariadb.helper.js~MariaDBHelper#fetch",
    "access": "public",
    "description": "Fetch all rows given a query string and values that can qualify the query",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "query",
        "description": "Query string to pass to mariadb"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Return array of values"
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "fetchOne",
    "memberof": "src/helpers/mariadb.helper.js~MariaDBHelper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/helpers/mariadb.helper.js~MariaDBHelper#fetchOne",
    "access": "public",
    "description": "Fetch the (first) row that matches a string",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "query",
        "description": "Query string to pass to mariadb"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a single value"
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "insert",
    "memberof": "src/helpers/mariadb.helper.js~MariaDBHelper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/helpers/mariadb.helper.js~MariaDBHelper#insert",
    "access": "public",
    "description": "Insert an Object into a specific table",
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "table",
        "description": "Name of table to insert object into"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "Mapping from column names to values to insert into DB Table"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<MariaDBInsertResponse>"
      ],
      "spread": false,
      "description": "Response from MariaDB"
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "insertMultiple",
    "memberof": "src/helpers/mariadb.helper.js~MariaDBHelper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/helpers/mariadb.helper.js~MariaDBHelper#insertMultiple",
    "access": "public",
    "description": "Insert multiple objects into the table",
    "lineNumber": 159,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "table",
        "description": "to insert into"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "objects",
        "description": "Array of objects to insert"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Response from MariaDB"
    }
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "mariadbHelper",
    "memberof": "src/helpers/mariadb.helper.js",
    "static": true,
    "longname": "src/helpers/mariadb.helper.js~mariadbHelper",
    "access": "public",
    "export": true,
    "importPath": "HapiServer/src/helpers/mariadb.helper.js",
    "importStyle": "mariadbHelper",
    "description": "Exported MariaDB Helper that uses DB configuration in config.yaml",
    "lineNumber": 242,
    "type": {
      "nullable": null,
      "types": [
        "MariaDBHelper"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "index",
    "content": "# Basic Webpack Server App\n\nThis is meant to be an example of how to use Webpack in the Backend for rapid development of an API server\nwith endpoints for managing requests and connections to other servers and/or database/storage tools.\n\nThis example can also be used to quickly create a server with your own endpoints to do whatever you would like\non any requests (either user/interaction based, or with a cron job to make it on a scheduled basis)\n\n## Dependencies\nNode v8+ and npm\n  (tested with node v8.12.0 and v10.15.1)\n\nSee [package.json](https://github.com/devlinjunker/template.node.hapi/blob/master/package.json) for full list of current dependencies\n - Hapi v18\n - Webpack + Loaders\n - Babel\n - FlowJS\n - ESLint\n - Mocha, Chai, Sinon\n - EsDoc\n - MariaDB\n - YamlJS\n\n## Development\n\nHow to use this template to create a quick HTTP REST server:\n\n1. Download and update dependencies\n2. Update `conf/config.yaml` with any changes to settings\n2. Add new OpenAPI endpoint to `./openapi.yaml`\n3. Add Unit tests in `src/controllers/` (Test Driven Development)\n4. Add Controller Files to `src/controllers/`\n  - For now, add reference to controller in `src/entry.js` (with other controllers)\n  - Controller endpoints will be served at `/api` (or whatever is set in config.yaml)\n5. Run `npm run start-watch` to compile and run server + tests in watch mode\n6. Navigate to http://localhost:3333/docs/swagger/index.html to see swagger-ui with your new endpoint\n\n### Tests/Running\n\n`npm run start-watch` to run open the server and run Webpack to watch for changes, recompiling, running the tests and restarting the server when it is done\n\n`npm run test-watch` to run Mocha and with all tests associated with the project, watch for changes on the files to re-run the tests\n\n`npm run dev-watch` to run only webpack to watch for changes on the files and recompile/rerun tests\n\n`npm run test` to run all of the unit tests for the application one time\n\n`npm run dev` to run a development version of the server\n\n`npm run build` to compile development version of server to `dist/`\n\n`npm run doc` to generate static documentation in the doc folder\n\n`npm run lint` to run linter and see any errors/warnings\n\n`npm run clean` clean the workspace (remove `dist/`)\n\n`npm run help` to print the contents of `help.txt` to the command line\n\n**TODO**\n\n`npm run build-prod` ... TODO: compile application to production version\n\n`npm start` .. TODO: start production Server\n\n`npm stop` .. TODO: stop production Server\n\n`npm restart` will restart once start/stop completed\n\n\n## TODO\n\n - [x] (^) Node 8\n - [x] (^) Webpack  \n    - https://medium.com/@christossotiriou/speed-up-nodejs-server-side-development-with-webpack-4-hmr-8b99a932bdda  \n    - [x] babel\n      - [x] sourcemap support\n      - https://www.npmjs.com/package/babel-plugin-source-map-support#description\n    - [x] flow webpack plugin - typechecking each compilation\n    - [x] eslinting  \n    - [x] test with mocha\n    - [x] nodemon to run server\n - [x] (^) Fix watch commands so that tests can run and output errors without breaking\n    - [x] mocha shouldn't stop the process\n    - [x] tests should run again on changes with webpack\n - [x] (^) OpenAPI (Swagger) Documentation and ESDoc Plugin https://swagger.io/docs/specification/about/  \n    - [v] OpenAPI Validation  \n    - [x] Swagger UI\n        - [x] in Docs\n - [x] (^) Debugging while running\n     - use `node --inspect dist/server.bundle.js` to start debugger and a node debugging tool to attach\n - [x] (^) Update Linting Rules (linewrap, length, etc)  \n    - [x] ensuring files start with a comment https://github.com/Stuk/eslint-plugin-header  \n    - [x] Require Comments https://eslint.org/docs/rules/require-jsdoc and valid https://eslint.org/docs/rules/valid-jsdoc  \n    - [x] Naming Conventions https://github.com/airbnb/javascript#naming-conventions\n    - [x] Test Rules\n      - https://www.npmjs.com/package/eslint-plugin-mocha\n      - https://github.com/jest-community/eslint-plugin-jest\n        - Jest plugin doesn't seem to allow configs of only some rules\n    - [x] all variables flow typed?\n    - [x] filenames: https://www.npmjs.com/package/eslint-plugin-filenames\n    - [x] import/export rules: https://www.npmjs.com/package/eslint-plugin-import\n - [x] (^) Chai as promised and sinon-chai\n - [..] (^) Simple DB endpoint  \n    - [..] PostgreSQL or MariaDB\n      - https://mariadb.com/kb/en/library/connector-nodejs-promise-api/\n      - [ ] SQL scripts in repo to init database... update schema later...\n      = [ ] (^) Sequelize? https://sequelize.org/v5/\n - [..] (^) Config.yaml (and Env config file?)\n    - port\n    - database\n    - other services/apis later?\n    - [ ] overrides\n - [x] (^) Healthcheck\n    - Server status\n    - MariaDB\n    - External Service\n    - [x] Link to in docs\n    - [x] Version?\n - [x] (^) cleanup old builds\n - [x] (-) Madge for Dependency graph\n - [ ] (-) Githooks for generating reports/linting  \n    - Check if READMEs exist at each directory level?\n    - Run `doc` command before commit on develop branch\n    - Check if spec files exist (except where special comment in file header)\n    - Run tests and cancel on tests fail\n - [ ] (^) GoAccess log analyzer\n    - https://goaccess.io/\n    - [ ] webpage with log analysis\n - [ ] (-) Use Hapi Error (in production? not dev?) https://www.npmjs.com/package/hapi-error\n - [ ] (v) Test coverage saved in spec files  \n - [ ] (v) Babel Istanbul(NYC) plugin https://github.com/istanbuljs/babel-plugin-istanbul  \n - [ ] (v) Istanbul (NYC) Reporters https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-reports/lib  \n   - Read test results report on webpage in docs site\n - [ ] (^) Hapi Improvements\n    - Dev Errors in log https://www.npmjs.com/package/hapi-dev-errors\n    - Hapi Swagger https://github.com/glennjones/hapi-swagger\n    - Joi object/param validation https://hapi.dev/family/joi/\n    - Simple Authentication for Healthcheck/Logging https://hapi.dev/tutorials/auth/\n    - Advanced Authentication\n - [ ] (^) Typescript/(Express?) router\n    - [ ] Routing Decorators and Validation https://github.com/typestack/routing-controllers\n      - Headers\n      - Cookies?\n    - [ ] OpenApi Decorators for openapi docs generation https://github.com/epiphone/routing-controllers-openapi\n      - Newman (Postman) Auto Test Generation: https://github.com/dtzar/openapi-auto-test\n    - [ ] Automatically find controller files in entry rather than need to reference  \n    - [ ] Proper error messages/codes from endpoints\n       - https://www.restapitutorial.com/httpstatuscodes.html\n    - [ ] MongoDB\n      - for quick development? (objects on the fly)\n - [ ] (-) Uptime Robot to check if app/website/api is alive or not\n - [ ] (-) Request Performance\n - [ ] (-) Helpers\n    - [..] mysql\n    - [ ] external-service request (with performance monitoring/caching?)\n    - [..] healthcheck using db and external service configs\n    - [ ] (^) Authentication\n    - [ ] (^) Logging\n      - GELF/Kibana?\n      - Winston/Bunyon\n    - [ ] SendEmail (mailchimp?)\n    - [ ] Cron?\n    - [ ] ElasticSearch? for search endpoint\n - [ ] (-) Request Details Model attached to handler parameters\n - [ ] (-) Compression of responses\n - [ ] (-) Run only affected tests on file save  \n - [ ] (-) production vs dev\n      - webpack/build\n      - pm2 for production\n      - config\n      - proper logging\n - [ ] (-) Require Node v8 and recommend v10 on build\n - [ ] (-) `bin/` directory with script named `node.hapi` for starting/stopping prod\n    - could be a javascript script file...\n - [ ] (-) Onboarding Documentation\n    - Environment Setup (IDEs, Building, Deployment, Repos)\n    - Overview of Architecture\n    - Resources for Languages/Frameworks/Libraries\n    - Coding Standards\n    - Technical Process (reviews, issue management, story lifecycle)\n    - Domain Specific Language (Jargon)\n    - Roles and Responsibilities\n - [ ] (?) Absolute Paths:\n    - maybe: https://itnext.io/configure-absolute-paths-with-create-react-app-and-flow-e4b8922676a2\n    - or: https://www.npmjs.com/package/app-module-path\n    - [x] fix `__dirname` param in webpack/node with config and solve docs paths\n - [..] (v) ESDoc plugins https://medium.com/trabe/understanding-esdoc-plugins-d9ee9095d98b  \n - [ ] (v) Cucumber.js for BDD(Behavior Driven Development) testing http://cucumber.github.io/cucumber-js/  \n - [x] (v) ESDoc Manual with src READMEs https://doc.esdoc.org/github.com/esdoc/esdoc/manual/feature.html#integration-manual  \n - ~~[ ] Docsify?~~  \n\n### Application\n\n - [..] GET/POST/PUT/DELETE Note endpoints\n - [x] Serve Docs\n    - [x] (v) ~only in development~ with config setting\n - [ ] Websocket\n    - Log output to website & file instead of console\n      - config.yaml settings\n - [ ] External API endpoint\n    - Weather (in UI?)\n    - (Garbage UPC) Map to information/notes?\n - [ ] Connect to Google Drive/Oauth\n - [ ] Authorized vs Unauthorized endpoints\n - [ ] SSO Server\n\n\n## Issues\n\n**Issues when properties missing/misnamed in controller route objects**\nTODO: add issues\n\n**Issues when controllers/routes being duplicated**\nTODO: add issues\n\n**Issues with wrong node version (<8)**\nTODO: add issues\n\n**Issues when not using babel/polyfill**\n```\nevents.js:183\n      throw er; // Unhandled 'error' event\n      ^\n\nError: spawn mocha ENOENT\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:190:19)\n    at onErrorNT (internal/child_process.js:362:16)\n    at _combinedTickCallback (internal/process/next_tick.js:139:11)\n    at process._tickCallback (internal/process/next_tick.js:181:9)\n```\n\n- Made sure using node v8 and re-ran `npm install -D`\n\n\n```\nmodule.js:550\n    throw err;\n    ^\n\nError: Cannot find module 'babel-polyfill'\n```\n\n- Commented out line `polyfill: \"@babel/polyfill\",` in webpack.config.js\n- re-ran webpack `npm run build`\n- then uncommented line and ran `npm run start-watch`\n",
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"version\": \"0.1.0\",\n  \"name\": \"HapiServer\",\n  \"description\": \"Template for Hapi Server\",\n  \"keywords\": [\n    \"flow\",\n    \"eslint\",\n    \"esdoc\",\n    \"template\",\n    \"node\",\n    \"hapi\",\n    \"server\"\n  ],\n  \"author\": \"djunker <devlin.junker@gmail.com>\",\n  \"license\": \"ISC\",\n  \"main\": \"dist/server.bundle.js\",\n  \"scripts\": {\n    \"start-watch\": \"rm -rf ./dist/; ./node_modules/.bin/webpack --watch & (sleep 20s && nodemon dist/server.bundle.js)\",\n    \"test-watch\": \"node_modules/.bin/mocha --watch --env.unit_test\",\n    \"dev-watch\": \"./node_modules/.bin/webpack --watch\",\n    \"test\": \"node node_modules/.bin/mocha --env.unit_test\",\n    \"doc\": \"./node_modules/.bin/esdoc && cp ./openapi.yaml docs/swagger/\",\n    \"dev\": \"npm run build && node dist/server.bundle.js\",\n    \"lint\": \"node_modules/.bin/eslint src/\",\n    \"build\": \"./node_modules/.bin/webpack\",\n    \"clean\": \"rm -rf ./dist\",\n    \"help\": \"echo \\\"$(cat help.txt)\\\"\",\n    \"doc-image\": \"./node_modules/madge/bin/cli.js ./src -x '.*\\\\.spec\\\\.js' -i docs/image/dependency.png & npm run doc\"\n  },\n  \"dependencies\": {\n    \"@hapi/hapi\": \"^18.4.0\",\n    \"@hapi/inert\": \"^5.2.2\",\n    \"hapi-pino\": \"^6.1.0\",\n    \"mariadb\": \"^2.1.1\",\n    \"yamljs\": \"^0.3.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.6.4\",\n    \"@babel/plugin-transform-flow-strip-types\": \"^7.4.4\",\n    \"@babel/polyfill\": \"^7.6.0\",\n    \"@babel/preset-env\": \"^7.6.0\",\n    \"@babel/preset-es2015\": \"^7.0.0-beta.53\",\n    \"@babel/preset-flow\": \"^7.0.0\",\n    \"@babel/preset-stage-0\": \"^7.0.0\",\n    \"@babel/register\": \"^7.6.0\",\n    \"babel-eslint\": \"^10.0.3\",\n    \"babel-loader\": \"^8.0.6\",\n    \"babel-plugin-source-map-support\": \"^2.1.1\",\n    \"babel-plugin-transform-flow-strip-types\": \"^6.22.0\",\n    \"chai\": \"^4.2.0\",\n    \"chai-as-promised\": \"^7.1.1\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-flow-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^6.4.0\",\n    \"eslint-config-prettier\": \"^6.4.0\",\n    \"eslint-import-resolver-webpack\": \"^0.11.1\",\n    \"eslint-loader\": \"^3.0.0\",\n    \"eslint-plugin-filenames\": \"^1.3.2\",\n    \"eslint-plugin-flowtype\": \"^4.3.0\",\n    \"eslint-plugin-flowtype-errors\": \"^4.1.0\",\n    \"eslint-plugin-header\": \"^3.0.0\",\n    \"eslint-plugin-import\": \"^2.18.2\",\n    \"eslint-plugin-mocha\": \"^6.2.1\",\n    \"eslint-plugin-prettier\": \"^3.1.1\",\n    \"flow-bin\": \"^0.107.0\",\n    \"flow-webpack-plugin\": \"^1.2.0\",\n    \"karma-chrome-launcher\": \"^3.1.0\",\n    \"mocha\": \"^6.2.0\",\n    \"mocha-loader\": \"^3.0.0\",\n    \"nodemon\": \"^1.19.2\",\n    \"prettier\": \"^1.18.2\",\n    \"require-context\": \"^1.1.0\",\n    \"sinon\": \"^7.4.2\",\n    \"sinon-chai\": \"^3.3.0\",\n    \"source-map-support\": \"^0.5.13\",\n    \"webpack\": \"^4.40.2\",\n    \"webpack-cli\": \"^3.3.9\",\n    \"webpack-dev-server\": \"^3.8.2\",\n    \"webpack-node-externals\": \"^1.7.2\",\n    \"webpack-shell-plugin\": \"^0.5.0\"\n  }\n}\n",
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "content": "# Simple Template API Docs\n\n- [Setup](manual/README.setup.html) - dependencies and how to install and start development (eventually\nproduction?)\n- [Entry Point](manual/README.entry.html)\n- [Controllers](manual/README.controllers.html) - mappings from url endpoints to methods for handling requests\n- [Dataservices](manual/README.dataservices.html) - classes/methods that connect to external services or datastores\n- [Helpers](manual/README.helpers.html) - classes that are used frequently for interacting with other systems/tools\n- [Test](manual/README.test.html) - files used to run the unit tests (eventually automated tests)\n\n.\n",
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/index.md",
    "name": "./index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/README.setup.md",
    "name": "./README.setup.md",
    "content": "# Setup\n\n**Requires Node 8+** (prefer 10?). Please install this before attempting to run. The easiest way to install and\nmanage node versions is by using the [Node Version Manager](https://github.com/nvm-sh/nvm).\n\nUse `nvm use 8` to switch node versions after installing a new Node version. **Then you should install all\nproject dependencies with** `npm install`. This should install the Hapi Server Framework, MariaDB and other\nlibraries used in this project.\n\nIf you have cloned the master branch, then the build should compile and all tests should pass once the\ndependencies have been downloaded and installed. To only compile the server, use `npm run build`, or you can\njust run the tests with `npm run test`. **To watch the files for changes and rebuild/retest the files\non changes, you can use** `npm run start-watch`.\n\nThe Note Controller/Dataservice Endpoints require MariaDB installed to store the notes passed. After you\nhave installed mariadb, you will need to set up the initial database using mariadb and a SQL program (or\nscripts if we get working). **Once the db is set up, the configuration for the database name, user, password\nand port are set in** `conf/config.yaml`\n([github](https://github.com/devlinjunker/template.node.hapi/blob/master/conf/config.yaml)).\n\n**Each endpoint that is created should have an OpenAPI representation in** `openapi.yaml`. This file can be\nused to run [Swagger UI](https://swagger.io/tools/swagger-ui/) to help with running/testing the processes\ndeveloped. There is a Swagger application at the API link in the docs or can view the raw\nfile([source](../swagger/openapi.yaml)) (Eventually we will autogenerate OpenAPI file from code annotations\nand create Postman test suites based on these files)\n\n## Webpack\n\nWebpack config file([github](https://github.com/devlinjunker/template.node.hapi/blob/master/webpack.config.js))\nis used to manage our webpack build to compile the application. In this file we:\n  - designate the files that will be created with the build\n  - define the source mapping that will be generated with the output (this should be changed in prod)\n  - set the target environment and available globals\n  - define where we should look to import files\n  - and set up modules/plugins for the build\n    - Babel and ESLint Loaders\n    - Flow Integration with Webpack\n    - Hot Module Replacement for rebuilding on file changes\n    - Webpack Shell Plugin to re-run Mocha tests on file changes/rebuild\n\n## Documentation\n\nThe `docs/` directory is created with `npm run doc`, this generates an esdoc webpage based on the modified\ntemplate stored in `docs/template`.\n\nThe Dependency Graph is created with [Madge](https://github.com/pahen/madge) and graphviz, you will need to\ninstall both in order to update the dependency graph. I didn't include these in the package.json dependencies\nbecause I felt this is more than is needed to develop a working app or even write basic documentation.\n\nInstall madge with `npm install madge` and install graphviz with `brew install graphviz` or\n`port install graphviz` (for OSX)\n\nI split this out to a separate npm script: `npm run doc-image`\n\n\n## Notes/Ideas\n  - **IDEA:**  init scripts with installation and SQL setup\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/src/README.entry.md",
    "name": "./src/README.entry.md",
    "content": "# Application Entry Point\n\nThe main method([source](../file/src/entry.js.html#lineNumber47)) is where we instantiate the server wrapper\nclass, and set up the routes to be handled by our application. We also want to make ensure the application is\nclosed down as calmly as possible when the user asks, so we make sure to nicely ask our server to shut itself\ndown and then ask mariadb to close any open connections([source](../file/src/entry.js.html#lineNumber71)).\n\nI think we also added the handler for `unhandledRejection` exceptions([source](../file/src/entry.js.html#lineNumber83))\nso that we print the error to output before exiting (We may also want to log this to any notification system)\n\n\n## Notes/Ideas\n\n- **IDEA:** Generic Handler/Middleware that creates Request Details Object to pass to each controller\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/src/controllers/README.controllers.md",
    "name": "./src/controllers/README.controllers.md",
    "content": "# Controllers\n\nControllers are functions that handle requests to specific endpoint paths:\n\n```\nfunction controllerFunction(request) {\n    ... do stuff and return a message ...\n}\n```\n\nThe first parameter passed in is the [HapiRequest](https://github.com/hapijs/hapi/blob/master/API.md#request for HapiRequest) object\n\nWe define the mapping from endpoint/method to controller function with an JSON object:\n\n```\nconst map1 = {\n  path: \"/endpoint\",\n  method: \"GET\", ///\n  controller: controllerFunction\n}\n```\n\nTo make this endpoint available to the server, we need to export an array of these mappings:\n\n```\nexport default [ map1, map2, ... ];\n```\n\n\n## Notes/Ideas\n - OPTIONS requests?\n - Do not instantiate classes to handle requests. This would be a huge memory overhead!\n    -  From Walmart interview: class methods bad for memory as we don't want to instantiate a class in memory. Seems like that isn't true for static functions though... https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\n    - I prefer creating classes with __static__  methods for encapsulation for testing and documentation purposes\n - DO NOT USE SHARED CLASS PROPERTIES/STATEFUL VARIABLES IN CONTROLLER FUNCTIONS\n    - These functions need to be stateless.\n - **IDEA:** Catch any exceptions that don't have response code and log or email indicating unexpected state\n - **IDEA:** generic CRUD endpoints with a flexible storage system for prototypes\n    - /{objectType}/create\n    - /{objectType}/read/{id}\n    - /{objectType}/update/{id}\n    - /{objectType}/delete/{id}\n    - /{objectType}/all?filters?fields?\n    - /{objectType}/search?q\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/src/dataservices/README.dataservices.md",
    "name": "./src/dataservices/README.dataservices.md",
    "content": "# Dataservices\n\nDataservices communicate with storage systems or external APIs to fetch/store data.\n\n\n## Hello World\n\nSimple example of Hello World endpoint plus example with random value and input from path parameter\n\n## Note Dataservice\n\nCreate/Read Note objects out of a mariadb/mysql database\n\n\n## Notes/Ideas\n  - RDBMS vs Document store\n    - CAP theorem stands for C – Consistency, A — Availability, P — Partitioning (or Scalability) and states that having all three properties at the same time is not possible,\n    - https://medium.com/statuscode/three-reasons-to-use-a-nosql-document-store-for-your-next-web-application-6b9eabffc8d8\n    - Document Store:\n      - use for settings data and where schema will be changed often\n      - when changes are small crud, based on users interactions?\n      - when count and aggregate data is useful to end user\n    - RDBMS:\n      - less duplicated data, normalized and stored in specific tables\n      - useful when data changes often\n      - seems like more useful for storing fact data in ETL processes?\n      - Q: phoenix?\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/src/helpers/README.helpers.md",
    "name": "./src/helpers/README.helpers.md",
    "content": "# Helpers\n\nHelpers are classes that wrap some functionality not associated with an external service\n\n## MariaDB\n  - connecting with mariadb server\n    - query\n    - insert\n    - fetch\n    - fetchOne\n\n## Config\n  - reading properties from [config file](https://github.com/devlinjunker/template.node.hapi/blob/master/conf/config.yaml#L3)\n\n## Healthcheck\n  - Make simple requests to configured DB/External Services to see if available\n\n\n\n\n## Notes/Ideas\n  - Do we want/need to worry about Dependency Injection/Singletons?\n  - **IDEA:** Move Server into helpers as `server.helper.js`?\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/test/README.test.md",
    "name": "./test/README.test.md",
    "content": "# Test\n\nTesting bootstrap file([source](https://github.com/devlinjunker/template.node.hapi/blob/master/test/test.bootstrap.js))\nfinds all of the test files and imports global objects that can be used in all tests to simplify each test\nfile. Also creates a sinon Sandbox that is reset before each test for mocking/stubbing services and non-tested\nfunctions in the test context.\n\nTo run the tests with mocha, use `npm run test` to see the output from all tests in `.spec` files in the\nstandard output.\n\n\nGlobal Imports (available in all `.spec` files):\n - `sinonSandbox` from [Sinon](https://sinonjs.org/)\n - `expect` from [Chai](https://www.chaijs.com/)\n - `describe`/`it`/`beforeEach` from [Mocha](https://mochajs.org/)\n\n\n## Notes/Ideas\n  - [ ] Look into differences between webpack tests vs `npm test`\n  - **IDEA:** Mocha settings/plugin for displaying filepath in output of tests (when erroring?)\n    - seems difficult to do on async/timeout errors\n",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 108,
    "kind": "testFile",
    "name": "template.node.hapi/src/controllers/hello.controller.spec.js",
    "content": "import { HelloWorld } from './hello.controller.js';\n\n/** @test {HelloWorld} */\ndescribe('HelloWorld', function() {\n  /** @test {HelloWorld.basic} */\n  describe('basic()', function() {\n    it('returns \\'Hello World!\\'', function() {\n      const returned = HelloWorld.basic();\n\n      expect(returned).to.equal('Hello World!');\n    });\n  });\n\n  /** @test {HelloWorld.name} */\n  describe('name()', function() {\n    it('returns \\'{request.params.name} says:\\'', function() {\n      const request = {\n        params: {\n          name: 'Devlin'\n        }\n      };\n\n      let returned = HelloWorld.name(request);\n      expect(returned.startsWith('Devlin says')).to.be.true;\n\n      request.params.name = 'Michelle';\n\n      returned = HelloWorld.name(request);\n      expect(returned.startsWith('Michelle says')).to.be.true;\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/src/controllers/hello.controller.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "template.node.hapi/src/controllers/hello.controller.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "template.node.hapi/src/controllers/hello.controller.spec.js~describe0",
    "access": null,
    "description": "HelloWorld",
    "lineNumber": 4,
    "testTargets": [
      "HelloWorld"
    ]
  },
  {
    "__docId__": 110,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "template.node.hapi/src/controllers/hello.controller.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "template.node.hapi/src/controllers/hello.controller.spec.js~describe0.describe1",
    "access": null,
    "description": "basic()",
    "lineNumber": 6,
    "testTargets": [
      "HelloWorld.basic"
    ]
  },
  {
    "__docId__": 111,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "template.node.hapi/src/controllers/hello.controller.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/controllers/hello.controller.spec.js~describe0.describe1.it2",
    "access": null,
    "description": "returns 'Hello World!'",
    "lineNumber": 7
  },
  {
    "__docId__": 112,
    "kind": "test",
    "name": "describe3",
    "testId": 3,
    "memberof": "template.node.hapi/src/controllers/hello.controller.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "template.node.hapi/src/controllers/hello.controller.spec.js~describe0.describe3",
    "access": null,
    "description": "name()",
    "lineNumber": 15,
    "testTargets": [
      "HelloWorld.name"
    ]
  },
  {
    "__docId__": 113,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "template.node.hapi/src/controllers/hello.controller.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/controllers/hello.controller.spec.js~describe0.describe3.it4",
    "access": null,
    "description": "returns '{request.params.name} says:'",
    "lineNumber": 16
  },
  {
    "__docId__": 114,
    "kind": "testFile",
    "name": "template.node.hapi/src/controllers/note.controller.spec.js",
    "content": "import { NoteController } from './note.controller.js';\nimport NoteDataservice from '../dataservices/note.service.js';\n\n/**\n * Question:\n * Do we want to unit test controllers? If we do openapi based testing with Newman, I think that should\n * cover all of the standard \"black-box\" expectations of the endpoint...\n * https://github.com/dtzar/openapi-auto-test\n *\n * Seems like we should still unit test with fakes/stubs on the dataservices so we can test before live,\n * especially if we have controllers that will modify/transform data\n */\n\n/** @test {NoteController} */\ndescribe('NoteController', function() {\n  let getStub;\n  beforeEach(function() {\n    // Create stubs and fakes here for how we expect backend to interact\n    getStub = sinonSandbox.stub(NoteDataservice, 'getNote');\n  });\n\n  /** @test {NoteController.getNoteById} */\n  describe('getNoteById()', function() {\n    /**\n     * Question:\n     * Is this useful? Or should we just check that it calls the backend dataservice?\n     *\n     * Maybe we should use Model classes for objects returned from service, so we can instantiate in\n     * the fakes/returns we stub\n     */\n    it('should return a Note with id passed', async function() {\n      const id = 1;\n      getStub.resolves({\n        id\n      });\n\n      const note = await NoteController.getNoteById({ params: { id } });\n\n      expect(note).to.contain({ id });\n    });\n\n    it('should return error message if id is invalid');\n\n    it('should return error message if Note doesn\\'t exist');\n  });\n\n  /** @test {NoteController.createNote} */\n  describe('createNote()', function() {\n    it('should call DataService.createNote (with newName?)', async function() {\n      const createNoteStub = sinonSandbox.stub(NoteDataservice, 'createNote');\n\n      const newNoteName = 'abc';\n      await NoteController.createNote({ payload: { name: newNoteName } });\n\n      expect(createNoteStub).to.be.called;\n      expect(createNoteStub).to.be.calledWith({ name: newNoteName });\n    });\n\n    it('should return note with name passed and new id', async function() {\n      const id = 13;\n      sinonSandbox.stub(NoteDataservice, 'createNote').callsFake(({ name }) => {\n        return {\n          id,\n          name\n        };\n      });\n\n      const newNoteName = 'abc';\n      const note = await NoteController.createNote({ payload: { name: newNoteName } });\n\n      expect(note).to.deep.equal({\n        id,\n        name: newNoteName\n      });\n    });\n\n    it('should return error if note name is empty');\n\n    it('should return error message if error creating note');\n  });\n\n  /** @test {NoteController.updateNote} */\n  describe('updateNote()', function() {\n    it('should call NoteDataservice.updateNote (with params)');\n\n    it('should return note with updated name, as passed');\n\n    it('should return error message if id is invalid');\n\n    it('should return error message if error updating note');\n  });\n\n  /** @test {NoteController.deleteNote} */\n  describe('deleteNote()', function() {\n    it('should call NoteDataservice.deleteNote (with id)');\n\n    it('should return the deleted note id');\n\n    it('should return error message if id is invalid');\n\n    it('should return error message if error deleting note');\n  });\n});\n",
    "static": true,
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/src/controllers/note.controller.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "test",
    "name": "describe5",
    "testId": 5,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5",
    "access": null,
    "description": "NoteController",
    "lineNumber": 15,
    "testTargets": [
      "NoteController"
    ]
  },
  {
    "__docId__": 116,
    "kind": "test",
    "name": "describe6",
    "testId": 6,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe6",
    "access": null,
    "description": "getNoteById()",
    "lineNumber": 23,
    "testTargets": [
      "NoteController.getNoteById"
    ]
  },
  {
    "__docId__": 117,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe6",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe6.it7",
    "access": null,
    "description": "Question:\nIs this useful? Or should we just check that it calls the backend dataservice?\n\nMaybe we should use Model classes for objects returned from service, so we can instantiate in\nthe fakes/returns we stub",
    "lineNumber": 31
  },
  {
    "__docId__": 118,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe6",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe6.it8",
    "access": null,
    "description": "should return error message if id is invalid",
    "lineNumber": 42
  },
  {
    "__docId__": 119,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe6",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe6.it9",
    "access": null,
    "description": "should return error message if Note doesn't exist",
    "lineNumber": 44
  },
  {
    "__docId__": 120,
    "kind": "test",
    "name": "describe10",
    "testId": 10,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe10",
    "access": null,
    "description": "createNote()",
    "lineNumber": 48,
    "testTargets": [
      "NoteController.createNote"
    ]
  },
  {
    "__docId__": 121,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe10.it11",
    "access": null,
    "description": "should call DataService.createNote (with newName?)",
    "lineNumber": 49
  },
  {
    "__docId__": 122,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe10.it12",
    "access": null,
    "description": "should return note with name passed and new id",
    "lineNumber": 59
  },
  {
    "__docId__": 123,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe10.it13",
    "access": null,
    "description": "should return error if note name is empty",
    "lineNumber": 77
  },
  {
    "__docId__": 124,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe10.it14",
    "access": null,
    "description": "should return error message if error creating note",
    "lineNumber": 79
  },
  {
    "__docId__": 125,
    "kind": "test",
    "name": "describe15",
    "testId": 15,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe15",
    "access": null,
    "description": "updateNote()",
    "lineNumber": 83,
    "testTargets": [
      "NoteController.updateNote"
    ]
  },
  {
    "__docId__": 126,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe15.it16",
    "access": null,
    "description": "should call NoteDataservice.updateNote (with params)",
    "lineNumber": 84
  },
  {
    "__docId__": 127,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe15.it17",
    "access": null,
    "description": "should return note with updated name, as passed",
    "lineNumber": 86
  },
  {
    "__docId__": 128,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe15.it18",
    "access": null,
    "description": "should return error message if id is invalid",
    "lineNumber": 88
  },
  {
    "__docId__": 129,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe15.it19",
    "access": null,
    "description": "should return error message if error updating note",
    "lineNumber": 90
  },
  {
    "__docId__": 130,
    "kind": "test",
    "name": "describe20",
    "testId": 20,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe20",
    "access": null,
    "description": "deleteNote()",
    "lineNumber": 94,
    "testTargets": [
      "NoteController.deleteNote"
    ]
  },
  {
    "__docId__": 131,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe20",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe20.it21",
    "access": null,
    "description": "should call NoteDataservice.deleteNote (with id)",
    "lineNumber": 95
  },
  {
    "__docId__": 132,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe20",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe20.it22",
    "access": null,
    "description": "should return the deleted note id",
    "lineNumber": 97
  },
  {
    "__docId__": 133,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe20",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe20.it23",
    "access": null,
    "description": "should return error message if id is invalid",
    "lineNumber": 99
  },
  {
    "__docId__": 134,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe20",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/controllers/note.controller.spec.js~describe5.describe20.it24",
    "access": null,
    "description": "should return error message if error deleting note",
    "lineNumber": 101
  },
  {
    "__docId__": 135,
    "kind": "testFile",
    "name": "template.node.hapi/src/dataservices/note.service.spec.js",
    "content": "import NoteDataservice from './note.service.js';\nimport mariadb from '../helpers/mariadb.helper.js';\n\n/** @test {NoteDataservice} */\ndescribe('NoteDataservice', function() {\n\n  /**\n   * Question:\n   * Should we test that mariadb fetchStub is called? Seems like \"white-box\" testing, but also\n   * we need to stub the query anyways..\n   *\n   * Maybe we should be testing that note object has properties we expect and dataservice should\n   * ensure we return those properties. Flow doesn't check this?\n   * Maybe just test things that affect the application output, like if the mariadb helper returns\n   * bad values what is response\n   */\n\n  /** @test {NoteDataservice.getNote} */\n  describe('getNote()', function() {\n    let fetchStub;\n    beforeEach(function() {\n      // Create stubs and fakes here on mariadbhelper, should we create a larger fake object class?\n      fetchStub = sinonSandbox.stub(mariadb, 'fetchOne');\n    });\n\n    it('should return a note object with matching id', async function() {\n      fetchStub.resolves({ id: 1, name: 'abc' });\n      const id = 1;\n\n      const result = await NoteDataservice.getNote({ id });\n\n      expect(result).to.contain({ id, name: 'abc' });\n    });\n\n    it('should throw error if id is invalid', async function() {\n      const promise = NoteDataservice.getNote({ id: 'abc' });\n\n      await expect(promise).to.be.rejected;\n    });\n\n    it('should throw error if id doesnt return note', async function() {\n      // Hide logging from exception message\n      sinonSandbox.stub(console, 'log');\n\n      fetchStub.resolves(undefined);\n\n      const promise = NoteDataservice.getNote({ id: 1 });\n      await expect(promise).to.be.rejected;\n    });\n\n    it('should throw error with code if mysql unreachable');\n  });\n\n  /** @test {NoteDataservice.createNote} */\n  describe('createNote()', function() {\n    it('should return a note with the name passed');\n  });\n\n  /** @test {NoteDataservice.createNotes} */\n  describe('createNotes()', function() {\n    it('should return same number of notes passed to be created');\n  });\n});\n",
    "static": true,
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/src/dataservices/note.service.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "template.node.hapi/src/dataservices/note.service.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "template.node.hapi/src/dataservices/note.service.spec.js~describe25",
    "access": null,
    "description": "NoteDataservice",
    "lineNumber": 5,
    "testTargets": [
      "NoteDataservice"
    ]
  },
  {
    "__docId__": 137,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "template.node.hapi/src/dataservices/note.service.spec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "template.node.hapi/src/dataservices/note.service.spec.js~describe25.describe26",
    "access": null,
    "description": "getNote()",
    "lineNumber": 19,
    "testTargets": [
      "NoteDataservice.getNote"
    ]
  },
  {
    "__docId__": 138,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "template.node.hapi/src/dataservices/note.service.spec.js~describe25.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/dataservices/note.service.spec.js~describe25.describe26.it27",
    "access": null,
    "description": "should return a note object with matching id",
    "lineNumber": 26
  },
  {
    "__docId__": 139,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "template.node.hapi/src/dataservices/note.service.spec.js~describe25.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/dataservices/note.service.spec.js~describe25.describe26.it28",
    "access": null,
    "description": "should throw error if id is invalid",
    "lineNumber": 35
  },
  {
    "__docId__": 140,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "template.node.hapi/src/dataservices/note.service.spec.js~describe25.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/dataservices/note.service.spec.js~describe25.describe26.it29",
    "access": null,
    "description": "should throw error if id doesnt return note",
    "lineNumber": 41
  },
  {
    "__docId__": 141,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "template.node.hapi/src/dataservices/note.service.spec.js~describe25.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/dataservices/note.service.spec.js~describe25.describe26.it30",
    "access": null,
    "description": "should throw error with code if mysql unreachable",
    "lineNumber": 51
  },
  {
    "__docId__": 142,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "template.node.hapi/src/dataservices/note.service.spec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "template.node.hapi/src/dataservices/note.service.spec.js~describe25.describe31",
    "access": null,
    "description": "createNote()",
    "lineNumber": 55,
    "testTargets": [
      "NoteDataservice.createNote"
    ]
  },
  {
    "__docId__": 143,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "template.node.hapi/src/dataservices/note.service.spec.js~describe25.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/dataservices/note.service.spec.js~describe25.describe31.it32",
    "access": null,
    "description": "should return a note with the name passed",
    "lineNumber": 56
  },
  {
    "__docId__": 144,
    "kind": "test",
    "name": "describe33",
    "testId": 33,
    "memberof": "template.node.hapi/src/dataservices/note.service.spec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "template.node.hapi/src/dataservices/note.service.spec.js~describe25.describe33",
    "access": null,
    "description": "createNotes()",
    "lineNumber": 60,
    "testTargets": [
      "NoteDataservice.createNotes"
    ]
  },
  {
    "__docId__": 145,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "template.node.hapi/src/dataservices/note.service.spec.js~describe25.describe33",
    "testDepth": 2,
    "static": true,
    "longname": "template.node.hapi/src/dataservices/note.service.spec.js~describe25.describe33.it34",
    "access": null,
    "description": "should return same number of notes passed to be created",
    "lineNumber": 61
  },
  {
    "__docId__": 146,
    "kind": "testFile",
    "name": "template.node.hapi/src/helpers/mariadb.helper.spec.js",
    "content": "// import mariaDbHelper from 'mariadb.helper.js';\n\n// Q: should we write this spec file? It seems like we're just testing things that won't be affected by\n// anything... and may just change later.\n//\n// Do we want to test that the correct query strings are sent to the mariadb library?\n// Seems like too much\n//\n// Seems like white box testing so I'm not going to do it right now\n\n/* @test {MariaDBHelper} */\n// describe('MariaDBHelper', () => {\n//   describe('constructor', () => {\n//     it('should not do anything if in test mode');\n//\n//     it('should require a config or transactionConnection');\n//   });\n//\n//   describe('shutdown()');\n//\n//   describe('query()');\n//\n//   describe('fetch()');\n//\n//   describe('fetchOne()');\n//\n//   describe('insert()');\n// });\n",
    "static": true,
    "longname": "/Users/junkerd/Programming/js/template.node.hapi/src/helpers/mariadb.helper.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  }
]